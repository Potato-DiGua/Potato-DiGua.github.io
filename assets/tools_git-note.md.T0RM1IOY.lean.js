import{_ as i,c as e,a4 as a,o as s}from"./chunks/framework.Dkk_5NfD.js";const c=JSON.parse('{"title":"Git命令记录","description":"","frontmatter":{},"headers":[],"relativePath":"tools/git-note.md","filePath":"tools/git笔记___git-note.md","lastUpdated":1735384147000}'),l={name:"tools/git-note.md"};function n(d,t,r,g,h,p){return s(),e("div",null,t[0]||(t[0]=[a(`<h1 id="git命令记录" tabindex="-1">Git命令记录 <a class="header-anchor" href="#git命令记录" aria-label="Permalink to &quot;Git命令记录&quot;">​</a></h1><ul><li><a href="#git命令记录">Git命令记录</a><ul><li><a href="#git初始配置">git初始配置</a></li><li><a href="#新建仓库">新建仓库</a></li><li><a href="#远程仓库">远程仓库</a></li><li><a href="#git-commit规范">git commit规范</a></li></ul></li></ul><h2 id="git初始配置" tabindex="-1">git初始配置 <a class="header-anchor" href="#git初始配置" aria-label="Permalink to &quot;git初始配置&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建公钥</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取已创建的SSH公钥</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.ssh/id_rsa.pub</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置个人信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;zzl&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;86543402@qq.com&quot;</span></span></code></pre></div><h2 id="新建仓库" tabindex="-1">新建仓库 <a class="header-anchor" href="#新建仓库" aria-label="Permalink to &quot;新建仓库&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新建仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><h2 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 添加远程仓库 </span></span>
<span class="line"><span>git remote add origin git@github.com:xxx.git</span></span>
<span class="line"><span># 修改远程仓库地址</span></span>
<span class="line"><span>git remote set-url origin git@github.com:xxx.git</span></span>
<span class="line"><span># 查看远程仓库信息</span></span>
<span class="line"><span>git remote -v</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">git add file.*</td><td style="text-align:left;">添加文件到暂存区</td></tr><tr><td style="text-align:left;">git commit -m &quot;提交的修改信息&quot;</td><td style="text-align:left;">提交修改</td></tr><tr><td style="text-align:left;">git log</td><td style="text-align:left;">显示提交日志(最新提交为当前版本)</td></tr><tr><td style="text-align:left;">git reflog</td><td style="text-align:left;">命令日志(可以用来恢复回滚之前的版本)</td></tr><tr><td style="text-align:left;">git reset --hard HEAD^</td><td style="text-align:left;">回退到上个版本，工作区文件发生改变(可恢复)</td></tr><tr><td style="text-align:left;">git reset --mixed HEAD^</td><td style="text-align:left;">撤销commit,撤销add，暂存区改变，工作区文件不发生改变</td></tr><tr><td style="text-align:left;">git reset --soft HEAD^</td><td style="text-align:left;">撤销commit，暂存区不发生改变，工作区文件不发生改变，Head指针指向前一个commit</td></tr><tr><td style="text-align:left;">git reset --hard 1094a</td><td style="text-align:left;">回退到特定版本</td></tr><tr><td style="text-align:left;">git reset HEAD</td><td style="text-align:left;">上一次add的文件全部撤销,暂存区清空</td></tr><tr><td style="text-align:left;">git reset HEAD XXX/XXX/XXX.java</td><td style="text-align:left;">撤销特定add的文件</td></tr><tr><td style="text-align:left;">git checkout -- readme.txt</td><td style="text-align:left;">撤销修改</td></tr><tr><td style="text-align:left;">git restore --staged readme.txt</td><td style="text-align:left;">撤销修改</td></tr><tr><td style="text-align:left;">git push -u origin master</td><td style="text-align:left;">第一次推送添加-u参数</td></tr><tr><td style="text-align:left;">git push origin master</td><td style="text-align:left;">推送master分支到远程仓库</td></tr><tr><td style="text-align:left;">git clone <a href="mailto:git@github.com" target="_blank" rel="noreferrer">git@github.com</a>:xxxx.git</td><td style="text-align:left;">克隆仓库</td></tr><tr><td style="text-align:left;">git switch -c dev</td><td style="text-align:left;">创建并切换到dev分支</td></tr><tr><td style="text-align:left;">git checkout -b dev</td><td style="text-align:left;">创建并切换到dev分支</td></tr><tr><td style="text-align:left;">git merge dev</td><td style="text-align:left;">将dev分支合并到当前分支</td></tr><tr><td style="text-align:left;">git log --graph --pretty=oneline --abbrev-commit</td><td style="text-align:left;">显示分支信息</td></tr></tbody></table><h2 id="git-commit规范" tabindex="-1">git commit规范 <a class="header-anchor" href="#git-commit规范" aria-label="Permalink to &quot;git commit规范&quot;">​</a></h2><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul>`,11)]))}const k=i(l,[["render",n]]);export{c as __pageData,k as default};
